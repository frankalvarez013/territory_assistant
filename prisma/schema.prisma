// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Congregation {
  id               String      @id @unique @default(uuid())
  congregationName String      @unique @db.VarChar(255)
  address          String      @unique @db.VarChar(255)
  Territories      Territory[]
  Users            User[]
  House            House[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Authenticator {
  id                   String  @id @default(cuid())
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id             String          @unique @default(uuid())
  name           String          @db.VarChar(255)
  email          String          @unique @db.VarChar(255)
  password       String          @db.VarChar(255)
  isAdmin        Boolean         @default(false)
  congregationID String
  congregation   Congregation    @relation(fields: [congregationID], references: [id])
  Territory      Territory[]
  Account        Account[]
  Session        Session[]
  Authenticator  Authenticator[]

  @@id([id, congregationID])
}

model TerritoryCounter {
  congregationID  String @id
  nextTerritoryID Int
}

enum TerritoryComment {
  Expired
  Unassigned
  Assigned
}

model Territory {
  territoryID     Int
  location        String           @unique @db.VarChar(255)
  houses          House[]
  AssignedDate    DateTime?
  ExperiationDate DateTime?
  congregationID  String
  currentUserID   String?
  activity        TerritoryComment @default(Unassigned)
  currentUser     User?            @relation(fields: [currentUserID], references: [id])
  Congregation    Congregation     @relation(fields: [congregationID], references: [id])

  @@id([territoryID, congregationID])
  @@unique([territoryID, congregationID])
}

enum Observation {
  EMPTY
  NO_LLEGAR
  INGLES
  OTRO_IDIOMA
  DUERME_DE_DIA
  VARON_VISITA
  PERRO_AFUERA
  PERRO_EN_CASA
  TESTIGOS
  VIOLENTO
  NO_TRASPASAR
  CANDADO
}

model HouseCounter {
  territoryID    Int
  congregationID String
  nextHouseID    Int

  @@id([territoryID, congregationID])
  @@unique([territoryID, congregationID])
}

model House {
  houseID        Int
  territoryID    Int
  congregationID String
  Direction      String
  StreetAd       String       @unique @db.VarChar(255)
  observation    Observation  @default(EMPTY)
  comment        String?      @db.VarChar(255)
  dateVisited    DateTime?
  Territory      Territory    @relation(fields: [territoryID, congregationID], references: [territoryID, congregationID])
  Congregation   Congregation @relation(fields: [congregationID], references: [id])

  @@id([territoryID, houseID, congregationID])
}
